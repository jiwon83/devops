pipeline {
    agent any //Ïã§ÌñâÎê† agent Ï†ïÏùò
    environment {
        DOCKER_CREDENTIALS_ID = 'docker-hub-token'
        DOCKER_IMAGE_NAME = 'wypl-web-dev'
        DOCKER_IMAGE_TAG = 'latest'
        JAR_FILE = 'backend/build/libs/*.jar'
        
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'deploy/back', credentialsId: 'gitlab-jiwon-token', url: 'https://lab.ssafy.com/s10-final/S10P31A602.git'
            }
        }
        stage('Propertis Download') {
            steps {
                withCredentials( [file(credentialsId: 'backend-s3-yml', variable: 's3'),
                                file(credentialsId: 'backend-jwt-yml', variable: 'jwt'),
                                file(credentialsId: 'backend-logging-yml', variable: 'logging'),
                                file(credentialsId: 'backend-mongo-yml', variable: 'mongo'),
                                file(credentialsId: 'backend-mysql-yml', variable: 'mysql'),
                                file(credentialsId: 'backend-oauth-yml', variable: 'oauth'),
                                file(credentialsId: 'backend-redis-yml', variable: 'redis'),
                                file(credentialsId: 'backend-weather-yml', variable: 'weather')
                               
                                ] ){
                                    script {
                                        sh '''
                                            rm -rf backend/src/main/resources/security
                                            mkdir backend/src/main/resources/security
                                            cp $s3 backend/src/main/resources/security/application-s3.yml
                                            cp $jwt backend/src/main/resources/security/application-jwt.yml
                                            cp $logging backend/src/main/resources/security/application-logging.yml
                                            cp $mongo backend/src/main/resources/security/application-mongo.yml
                                            cp $mysql backend/src/main/resources/security/application-mysql.yml
                                            cp $oauth backend/src/main/resources/security/application-oauth.yml
                                            cp $redis backend/src/main/resources/security/application-redis.yml
                                            cp $weather backend/src/main/resources/security/application-weather.yml
                                            
                                        '''
                                    }
                                }
            }
        }
        stage('Build') {
            steps {
                dir('backend'){
                    sh './gradlew clean bootJar'
                }
            }
        }
        stage('Copy Deploy Script') {
            steps {
                withCredentials([file(credentialsId: 'backend-deploy-sh', variable: 'deploy')]){
                    script {
                        sh '''
                            cp $deploy backend/non-stop-deploy.sh
                            
                        '''
                    }
                }
            }
        }
        stage('Build Docker Image & Deploy') {
            steps {
                sshagent(credentials: ['43.203.229.26-ssh']) {
                    sh'''
                        ssh -o StrictHostKeyChecking=no ubuntu@43.203.229.26 '
                            cd /home/ubuntu/waffle/deploy/ci-cd/data/jenkins/data/workspace/deploy-backend/backend
                            sudo chmod 777 non-stop-deploy.sh
                            bash non-stop-deploy.sh
                        '
                    '''
                }
            }
        }    
        
    }
    post {
        success {
            script {
                withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
                    def gitBranch = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    def gitCommitMessage = sh(script: "git log -1 --pretty=format:'%s'", returnStdout: true).trim()
                    def gitAuthor = sh(script: "git log -1 --pretty=format:'%an'", returnStdout: true).trim()
                    
                    
                    discordSend description: """
                    Îã¥ÎãπÏûê : ${gitAuthor}
                    Ïª§Î∞ã Î©îÏãúÏßÄ : ${gitCommitMessage}
                    Ïã§Ìñâ ÏãúÍ∞Ñ : ${currentBuild.duration / 1000}s
                    Ïõπ ÏÇ¨Ïù¥Ìä∏ : [What's Your Plan](https://wypl.site)
                    """,
                    link: env.BUILD_URL, result: currentBuild.currentResult, 
                    title: "üåê [Prod] Backend : ${currentBuild.displayName} Success üöÄÔ∏è", 
                    webhookURL: "$DISCORD"
                }
            }
        }
        failure {
            script {
                withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
                    def gitBranch = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    def gitCommitMessage = sh(script: "git log -1 --pretty=format:'%s'", returnStdout: true).trim()
                    def gitAuthor = sh(script: "git log -1 --pretty=format:'%an'", returnStdout: true).trim()
                    
                    
                    discordSend description: """
                    Îã¥ÎãπÏûê : ${gitAuthor}
                    Ïª§Î∞ã Î©îÏãúÏßÄ : ${gitCommitMessage}
                    Ïã§Ìñâ ÏãúÍ∞Ñ : ${currentBuild.duration / 1000}s
                    """,
                    link: env.BUILD_URL, result: currentBuild.currentResult, 
                    title: "üåê [Prod] Backend : ${currentBuild.displayName} Failure üò≠", 
                    webhookURL: "$DISCORD",
                    notes: "@here"
                }
            }
        }
    }
}
